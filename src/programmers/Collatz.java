package programmers;

/**
 * 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다.
 * 작업은 다음과 같습니다.
 * 1-1. 입력된 수가 짝수라면 2로 나눕니다.
 * 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.
 * 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.
 * 예를 들어, 입력된 수가 6이라면 6->3->10->5->16->8->4->2->1 이 되어 총 8번 만에 1이 됩니다.
 * 위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요.
 * 단, 작업을 500번을 반복해도 1이 되지 않는다면 -1을 반환해 주세요.
 */
public class Collatz {
   
    public static void main(String[] args) {
        
        /**
         * 예시로 나와있던 626331 숫자는 int형이면 오답이 나온다.
         * 이유는, 해당 숫자가 루프문 과정에서 홀수이면서 num이 가질 수 있는 최대 큰 수라면 3을 곱하였을 때
         * int 범위를 초과하게 되어 연산이 뒤틀리게된다.
         * 따라서 long 타입을 가져야 한다.
         */
        long num = 16;
        int count = 0;

        while (num != 1) {
            if (count == 500) {
                count = -1;
                break;
            }

            if (num % 2 == 0) {
                num = num / 2;
            } else {
                num = (num * 3) + 1;
            }
            count++;
        }
        System.out.println(count);
    }
}